== README

Проект faceit-hrm.

Основное назначение проекта и краткое описание:

 hrm (human resources management) system - система управление человеческими ресурсами

    Задача системы помочь руководителю фирмы, а также HR-менеджерам вести контроль и учет персонала.
 Дает возможность без особых усилий создавать/размещать/удалять(далее управлять) резюме кандидатов.
 Управлять вакансииями. Вести контроль встреч, собеседований и других событий связанных с
 персоналом нашей фирмы. Дает возможность настроить систему уведомлений и напоминаний.

 Описание по мере поступления требований от заказчика будет дополняться/изменяться.

 Первая проблема с которой мы сталкиваемся это отсутствие верстки для проекта. По-этому работаем с исходником.
 https://cleverstaff.net/ войдите в дэмоверсию.

Правила проведения разработ на этом проекте:

 1. Покрытие тестами ОБЯЗАТЕЛЬНО и оно должно быть, на стадии проектирования, на уровне не ниже 85%, а по заврешению
    проекта должно быть на уровне 90-95%:

    1.1. TDD - приветствуется. Что это такое и как с ним работаем узнаем отсюда http://habrahabr.ru/post/163597/
         1.1.1 Кратко:
                Написали тэст - он фэйлится.
                Залили в репозиторий.
                Покрыли тест кодом - тест прошел(нужно чтобы прошел).
                Залили в репозиторий.
                Если рабочий код требует рефакторинга, делаем это
                Заливаем писанину в репозиторий.

    1.2. BDD - не приветствуется. Что это такое и как с ним работаем узнаем отсюда https://www.google.com.ua

    1.3. Пишем тесты с помощью этих инструментов - RSpec, Capybara, Cucumber, FactoryGirl.

 2. Проект, на данный момент, разрабатывается на rails 5.0.1 и ruby 2.4.0
    для обозначения верси руби используем файл .ruby-version - внутри  ruby-2.4.0
    для обозначения gemset используем файл .ruby-gemset - внутри имя_гемсета

    В гемфайле обязательно указываем версию гема, который устанавливаем.

 3.  Работа на git.
    Вэбморда - https://bitbucket.org,
    Проект - https://bitbucket.org/hrm_system_team/faceit-hrm

    3.1. Общая информация:
        На репозитории есть две основные ветки это - master и develop.
        Разработка проводится на ветке develop и только на ней! Создаем рабочие ветки тоже с нее. Уточнение - ветка для разработчиков и тимлида. Последний
            и/или человек, ответственнен за работу с пулрэквестами и ответственнен за дэплой в staging.

        Ветка master предназначается для дэплоя на production и только для этого! Уточнение - ветка только для тимлида и/или
            человека ответственного за работу с пулрэквестами и ответственного за дэплой в production.

        Ветка develop предназначается для дэплоя на staging(http://staging.faceit-hrm.loc). Если заказчика все устраивает,
            то последняя версия содержимого ветки develop мэржится с мастером и уже из мастера дэплоится в
            production(http://faceit-hrm.loc).

    3.2. Краткий пример работы с гитом для одного задания:

            3.2.1. Переходим в ветку develop - git co develop
                ("co" - это alias вместо стандартного "checkout"; у кого они не прописаны, для простоты, советую прописть.
                Как? - Загуглите!)

            3.2.2. Подтягиваем изменения этой ветки - git pull origin develop

            3.2.3. Создаем новую ветку:
                    Важно!
                    Для упрощения работы и для элементарного ориентирования на проекте, имена для веток создаем
                по следующему шаблону:
                                (номер-задания)_(трекер-задания)

                в нашем случае (номер-задания)  это - 1234
                               (system-задания) это - feature, bug, верстка(заменяем на markup) и др. (в рэдмайне будет видно system задания)

                Текст пишем латанскими буквами.
                = Пример:
                    git co -b 5484_feature  # на выходе имеем ветку 5484_feature

            3.2.4. Делаем свою работу, переодически заливаем изменения в текущую ветку. Делаем коммиты как можно чаще.
               Один коммит минимум раз в час(разбивайте задание грамотно. Полотно залитого вами кода труднее проверить).
               Но и коммитами в одну строчку засерать гит не надо(кроме некоторых исключений. Бывает - забыл что-то или
               мисклик.)

               Пред тем как зделать коммт, проверяем, что мы сделали:
               =Пример:
                   git st
                   файлы. которые нужно добавить на репозиторий добавляем при помощи
                   git add . # добавит все файлы
                   git add (название_файла) # добавит конкретный файл

               Название коммита не должно быть километровым, и недолжно быть длиной в одно слово.
               Коммит должен начинаться со строк - 'Add', 'Remove', 'Change', 'Fix', 'Refactor' и других слов в настоящем
               времени.

               = Пример:
                   git ci -am 'Add column "first_name" to user table' # это норма

                   git ci -am 'Added columns the first_name to the user table, which I have created after my super lunch' # это-
                       сами поимаете бред.

                   можно писать с заглавием и описанием.
                   Пример:
                   git ci -a [ENTER]

                   и дальше первой строкой кратко о коммите, затем, через [ENTER], пишите описание(сколько хотите ;) ).

                   Думаю, что первый вариант предпочтительней, но выбирать Вам.

            3.2.5. Собстdенно коммитим

               Пример: git push origin feature_5484

            3.2.6. Заходим на репозиторий с нашим проектом. Выбираем имя нашей ветки и создаем pull request.

            3.2.7. Читаем комментарии от тимлида. Фиксим, отстаиваем свою точку зрения и пр. Приступаем к следующему таску.

 4. Синтаксис rails 4.x ruby-2.x.
    =Hash:
            { name: 'Vasya' } или { 'name' => 'Vasya' }  # норма. Ракета используется в случае,
                                                         # если ключ является строкой

            {name:'Vasya'} или {'name'=>'Vasya'} - без пробелов это не читабильно

    =Array:
            [ 1, 2, 3 ]

    =Array of Hashes:
            [ { name: 'Vasya1' }, { name: 'Vasya2' }, { name: 'Vasya3' }, { name: 'Vasya4' } ] # норма

            [
              { name: 'Vasya1' },
              { name: 'Vasya2' },
              { name: 'Vasya3' },
              { name: 'Vasya4' }
            ]                               # норма

            [
              { name: 'Vasya1' }, { name: 'Vasya2' }, { name: 'Vasya3' }, { name: 'Vasya4' } # если кол-во небольшое
            ]

    =String:
            '' или ""? А также ``.
            1. '' - применяем повсеместно и по умолчанию.
            2. "" - применяем только в случае, если нам нужно сделать иньекцию в строку.
                =Пример:
                    "His name is #{user.first_name}. It is nice name!"
            3. `` - применяется в SQL запросах.
            4. есть случаи комбинирования кавычек.
    =Veiew:
            Во вьюхах работаем с шаблонизатором haml https://github.com/haml/haml

 5. DRY, CRUD - стремимся к этому.

    Не называйте методы типа:
        def cc_co-co-p
          # какой-то код
        end
        или
        def method_temp_name
          # какой-то код
        end

        Название, вкратце дожно отображать содержимое жтого метода:
        module UserHelper
          ...

          def full_name_of(user)
            "#{user.first_name} #{user.last_name}"
          end

          ...
        end

    Пользуемся хэлперами - не засераем вьюхи.

    Контроллеры должны быть легкими и чистыми.

    Все "тяжести" переносим в модели.

    Запросы в БД из вьюх, хелперов - караются законом.

    Лучше сделать несколько простых запросов в БД, чем один, который будет проходить вечность.

    Рельсы уже много лет разрабатываются, по-этому прежде чем придумывать свой метод, поищите его аналог в теле
        фрэймворка.

    Не стоит выдумывать велосипед. Возможно уже есть gem, который облегчит Вам работу.

    Прежде чем отвлекать своих колег вопросами(от работы, чатинга, просмотра порно страниц или офисного троллинга),
        спросите себя, достаочно ли Вы погуглили.

    Спрашивайте у членов команды и у тимлида(в первую очередь). Понятно, что все мы учимся и каждый по своему
        будет тупить. Не забываем гуглить. С Вашей проблемой явно уже кто-то столкнулся ранее.

== PS:
            И на последок! В первую очередь этот проет нужен, чтобы приобрести новые навыки работы и закрепить старые.
        Научится работать в тиме.
            Если возникают вопросы или предложения, смело их озвучивайте.
        Обосрать работу другого разработчика, тимлида или мэнеджера проекта может каждый, но стать полноценным членом
        команды гораздо труднее. Так что общаемся, работаем сообща. И не забываем ГУГЛИТЬ.
